 #!/usr/bin/env python

import numpy as np
import time
import socket
import rospy
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('192.168.0.106', 6512))
 
global lin_v, ori_w, xc, yc

lin_v = 0
ori_w = 0
xc = 0
yc = 0


def callback(msg):
    global lin_v, ori_w, xc, yc
    
    lin_v = msg.twist.twist.linear.x
    ori_w = msg.twist.twist.angular.z
    xc = msg.pose.pose.position.x
    yc = msg.pose.pose.position.y
    
def cmd_pub():
    global lin_v, ori_w, xc, yc, Vc, Wc

    rospy.init_node('record', anonymous = True)
    starttime = rospy.Time.now()
    rospy.Subscriber('odom', Odometry, callback)
    pub = rospy.Publisher('set_velocity', Twist, queue_size=10)
    vel_msg = Twist()

    while not rospy.is_shutdown():
        try:
            data = xc,yc,lin_v,ori_w
            data = str(data)
            client.send(data.encode())
            cmd = client.recv(1024).decode()
            cmd = cmd[1:-1]
            cmd = cmd.split(', ')


            vel_msg.linear.x = float(cmd[0])
            vel_msg.angular.z = float(cmd[1])
            pub.publish(vel_msg)
            
            time.sleep(0.013)
        except:
            vel_msg.linear.x = 0
            vel_msg.angular.z = 0
            pub.publish(vel_msg)
            client.close()
            break
            
    endtime = rospy.Time.now()
    print("Runing time: ",(endtime - starttime).to_sec())

if __name__ == '__main__':
    try:
        print("Sending")
        cmd_pub()
    except rospy.ROSInterruptException:
        pass
