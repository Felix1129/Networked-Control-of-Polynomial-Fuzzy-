 #!/usr/bin/env python

import numpy as np
import time
import socket
import rospy
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('192.168.0.106', 6512))
 
global lin_x,lin_y, lin_z, xc, yc, zc, ori_wphi, ori_wthe, ori_wpsi
lin_z = 0
lin_y = 0
lin_x = 0
ori_wphi = 0
ori_wthe = 0
ori_wpsi = 0

xc = 0
yc = 0
zc = 0

def callback(msg):
    global lin_x, lin_z, lin_y, ori_w, xc, yc, zc, ori_wphi, ori_wthe, ori_wpsi
    lin_z = msg.twist.twist.linear.z
    lin_y = msg.twist.twist.linear.y
    lin_x = msg.twist.twist.linear.x
    ori_wphi = msg.twist.twist.angular.x
    ori_wthe = msg.twist.twist.angular.y
    ori_wpsi = msg.twist.twist.angular.z

    xc = msg.pose.pose.position.x
    yc = msg.pose.pose.position.y
    zc = msg.pose.pose.position.z
    
def cmd_pub():

    global lin_x, lin_y, lin_z, ori_w, xc, yc, zc, ori_wphi, ori_wthe, ori_wpsi

    rospy.init_node('record', anonymous = True)
    starttime = rospy.Time.now()
    rospy.Subscriber('odom', Odometry, callback)
    pub = rospy.Publisher('set_velocity', Twist, queue_size=10)
    vel_msg = Twist()

    while not rospy.is_shutdown():
        try:
            data = lin_x, lin_y, lin_z, ori_wphi, ori_wthe, ori_wpsi, xc,yc,zc
            data = str(data)
            client.send(data.encode())
            cmd = client.recv(1024).decode()
            cmd = cmd[1:-1]
            cmd = cmd.split(', ')
           

            vel_msg.linear.x = float(cmd[0])
            vel_msg.linear.y = float(cmd[1])
            vel_msg.linear.z = float(cmd[2])
            vel_msg.angular.x = float(cmd[3])
            vel_msg.angular.y = float(cmd[4])
            vel_msg.angular.z = float(cmd[5])
            pub.publish(vel_msg)
            
            time.sleep(0.013)
        except:
            vel_msg.linear.x = 0
            vel_msg.linear.y = 0
            vel_msg.linear.z = 0
            vel_msg.angular.x = 0
            vel_msg.angular.y = 0
            vel_msg.angular.z = 0
            pub.publish(vel_msg)
            client.close()
            break
            
    endtime = rospy.Time.now()
    print("Runing time: ",(endtime - starttime).to_sec())

if __name__ == '__main__':
    try:
        print("Sending")
        cmd_pub()
    except rospy.ROSInterruptException:
        pass
